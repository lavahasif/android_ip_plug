// Autogenerated from Pigeon (v1.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class NetworkResult {
  String? wifi;
  String? wifi_tether;
  String? wifiboth;
  String? privates;
  String? cellular;
  String? Usb;
  String? Bluethooth;
  String? WifiName;
  String? all_interface;
  bool? IsWifiConnected;
  bool? IsHotspotEnabled;
  bool? IsWifiEnabled;
  bool? IsLocationEnabled;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['wifi'] = wifi;
    pigeonMap['wifi_tether'] = wifi_tether;
    pigeonMap['wifiboth'] = wifiboth;
    pigeonMap['privates'] = privates;
    pigeonMap['cellular'] = cellular;
    pigeonMap['Usb'] = Usb;
    pigeonMap['Bluethooth'] = Bluethooth;
    pigeonMap['WifiName'] = WifiName;
    pigeonMap['all_interface'] = all_interface;
    pigeonMap['IsWifiConnected'] = IsWifiConnected;
    pigeonMap['IsHotspotEnabled'] = IsHotspotEnabled;
    pigeonMap['IsWifiEnabled'] = IsWifiEnabled;
    pigeonMap['IsLocationEnabled'] = IsLocationEnabled;
    return pigeonMap;
  }

  static NetworkResult decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return NetworkResult()
      ..wifi = pigeonMap['wifi'] as String?
      ..wifi_tether = pigeonMap['wifi_tether'] as String?
      ..wifiboth = pigeonMap['wifiboth'] as String?
      ..privates = pigeonMap['privates'] as String?
      ..cellular = pigeonMap['cellular'] as String?
      ..Usb = pigeonMap['Usb'] as String?
      ..Bluethooth = pigeonMap['Bluethooth'] as String?
      ..WifiName = pigeonMap['WifiName'] as String?
      ..all_interface = pigeonMap['all_interface'] as String?
      ..IsWifiConnected = pigeonMap['IsWifiConnected'] as bool?
      ..IsHotspotEnabled = pigeonMap['IsHotspotEnabled'] as bool?
      ..IsWifiEnabled = pigeonMap['IsWifiEnabled'] as bool?
      ..IsLocationEnabled = pigeonMap['IsLocationEnabled'] as bool?;
  }
}

class PermissionResult {
  String? name;
  bool? status;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['name'] = name;
    pigeonMap['status'] = status;
    return pigeonMap;
  }

  static PermissionResult decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PermissionResult()
      ..name = pigeonMap['name'] as String?
      ..status = pigeonMap['status'] as bool?;
  }
}

class Hotspot {
  String? name;
  String? presharedkey;
  bool? enabled;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['name'] = name;
    pigeonMap['presharedkey'] = presharedkey;
    pigeonMap['enabled'] = enabled;
    return pigeonMap;
  }

  static Hotspot decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Hotspot()
      ..name = pigeonMap['name'] as String?
      ..presharedkey = pigeonMap['presharedkey'] as String?
      ..enabled = pigeonMap['enabled'] as bool?;
  }
}

class _Api2HostCodec extends StandardMessageCodec {
  const _Api2HostCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Hotspot) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is NetworkResult) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return Hotspot.decode(readValue(buffer)!);
      
      case 129:       
        return NetworkResult.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class Api2Host {
  /// Constructor for [Api2Host].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  Api2Host({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _Api2HostCodec();

  Future<NetworkResult> getResult(NetworkResult arg_results) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Api2Host.getResult', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_results]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as NetworkResult?)!;
    }
  }

  Future<Hotspot> getHotspot(Hotspot arg_results) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Api2Host.getHotspot', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_results]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as Hotspot?)!;
    }
  }
}

class _PermissionResult2HostCodec extends StandardMessageCodec {
  const _PermissionResult2HostCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PermissionResult) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return PermissionResult.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class PermissionResult2Host {
  /// Constructor for [PermissionResult2Host].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PermissionResult2Host({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PermissionResult2HostCodec();

  Future<PermissionResult> getResult(PermissionResult arg_results) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PermissionResult2Host.getResult', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_results]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as PermissionResult?)!;
    }
  }
}
