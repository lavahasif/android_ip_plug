// Autogenerated from Pigeon (v1.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.shersoft.android_ip;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NetworkResult {
    private String wifi;
    public String getWifi() { return wifi; }
    public void setWifi(String setterArg) { this.wifi = setterArg; }

    private String wifi_tether;
    public String getWifi_tether() { return wifi_tether; }
    public void setWifi_tether(String setterArg) { this.wifi_tether = setterArg; }

    private String wifiboth;
    public String getWifiboth() { return wifiboth; }
    public void setWifiboth(String setterArg) { this.wifiboth = setterArg; }

    private String privates;
    public String getPrivates() { return privates; }
    public void setPrivates(String setterArg) { this.privates = setterArg; }

    private String cellular;
    public String getCellular() { return cellular; }
    public void setCellular(String setterArg) { this.cellular = setterArg; }

    private String Usb;
    public String getUsb() { return Usb; }
    public void setUsb(String setterArg) { this.Usb = setterArg; }

    private String Bluethooth;
    public String getBluethooth() { return Bluethooth; }
    public void setBluethooth(String setterArg) { this.Bluethooth = setterArg; }

    private String WifiName;
    public String getWifiName() { return WifiName; }
    public void setWifiName(String setterArg) { this.WifiName = setterArg; }

    private String all_interface;
    public String getAll_interface() { return all_interface; }
    public void setAll_interface(String setterArg) { this.all_interface = setterArg; }

    private Boolean IsWifiConnected;
    public Boolean getIsWifiConnected() { return IsWifiConnected; }
    public void setIsWifiConnected(Boolean setterArg) { this.IsWifiConnected = setterArg; }

    private Boolean IsHotspotEnabled;
    public Boolean getIsHotspotEnabled() { return IsHotspotEnabled; }
    public void setIsHotspotEnabled(Boolean setterArg) { this.IsHotspotEnabled = setterArg; }

    private Boolean IsWifiEnabled;
    public Boolean getIsWifiEnabled() { return IsWifiEnabled; }
    public void setIsWifiEnabled(Boolean setterArg) { this.IsWifiEnabled = setterArg; }

    private Boolean IsLocationEnabled;
    public Boolean getIsLocationEnabled() { return IsLocationEnabled; }
    public void setIsLocationEnabled(Boolean setterArg) { this.IsLocationEnabled = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("wifi", wifi);
      toMapResult.put("wifi_tether", wifi_tether);
      toMapResult.put("wifiboth", wifiboth);
      toMapResult.put("privates", privates);
      toMapResult.put("cellular", cellular);
      toMapResult.put("Usb", Usb);
      toMapResult.put("Bluethooth", Bluethooth);
      toMapResult.put("WifiName", WifiName);
      toMapResult.put("all_interface", all_interface);
      toMapResult.put("IsWifiConnected", IsWifiConnected);
      toMapResult.put("IsHotspotEnabled", IsHotspotEnabled);
      toMapResult.put("IsWifiEnabled", IsWifiEnabled);
      toMapResult.put("IsLocationEnabled", IsLocationEnabled);
      return toMapResult;
    }
    static NetworkResult fromMap(Map<String, Object> map) {
      NetworkResult fromMapResult = new NetworkResult();
      Object wifi = map.get("wifi");
      fromMapResult.wifi = (String)wifi;
      Object wifi_tether = map.get("wifi_tether");
      fromMapResult.wifi_tether = (String)wifi_tether;
      Object wifiboth = map.get("wifiboth");
      fromMapResult.wifiboth = (String)wifiboth;
      Object privates = map.get("privates");
      fromMapResult.privates = (String)privates;
      Object cellular = map.get("cellular");
      fromMapResult.cellular = (String)cellular;
      Object Usb = map.get("Usb");
      fromMapResult.Usb = (String)Usb;
      Object Bluethooth = map.get("Bluethooth");
      fromMapResult.Bluethooth = (String)Bluethooth;
      Object WifiName = map.get("WifiName");
      fromMapResult.WifiName = (String)WifiName;
      Object all_interface = map.get("all_interface");
      fromMapResult.all_interface = (String)all_interface;
      Object IsWifiConnected = map.get("IsWifiConnected");
      fromMapResult.IsWifiConnected = (Boolean)IsWifiConnected;
      Object IsHotspotEnabled = map.get("IsHotspotEnabled");
      fromMapResult.IsHotspotEnabled = (Boolean)IsHotspotEnabled;
      Object IsWifiEnabled = map.get("IsWifiEnabled");
      fromMapResult.IsWifiEnabled = (Boolean)IsWifiEnabled;
      Object IsLocationEnabled = map.get("IsLocationEnabled");
      fromMapResult.IsLocationEnabled = (Boolean)IsLocationEnabled;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PermissionResult {
    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private Boolean status;
    public Boolean getStatus() { return status; }
    public void setStatus(Boolean setterArg) { this.status = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("status", status);
      return toMapResult;
    }
    static PermissionResult fromMap(Map<String, Object> map) {
      PermissionResult fromMapResult = new PermissionResult();
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object status = map.get("status");
      fromMapResult.status = (Boolean)status;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Hotspot {
    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private String presharedkey;
    public String getPresharedkey() { return presharedkey; }
    public void setPresharedkey(String setterArg) { this.presharedkey = setterArg; }

    private Boolean enabled;
    public Boolean getEnabled() { return enabled; }
    public void setEnabled(Boolean setterArg) { this.enabled = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("presharedkey", presharedkey);
      toMapResult.put("enabled", enabled);
      return toMapResult;
    }
    static Hotspot fromMap(Map<String, Object> map) {
      Hotspot fromMapResult = new Hotspot();
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object presharedkey = map.get("presharedkey");
      fromMapResult.presharedkey = (String)presharedkey;
      Object enabled = map.get("enabled");
      fromMapResult.enabled = (Boolean)enabled;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class Api2HostCodec extends StandardMessageCodec {
    public static final Api2HostCodec INSTANCE = new Api2HostCodec();
    private Api2HostCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Hotspot.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return NetworkResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Hotspot) {
        stream.write(128);
        writeValue(stream, ((Hotspot) value).toMap());
      } else 
      if (value instanceof NetworkResult) {
        stream.write(129);
        writeValue(stream, ((NetworkResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Api2Host {
    void getResult(NetworkResult results, Result<NetworkResult> result);
    void getHotspot(Hotspot results, Result<Hotspot> result);

    /** The codec used by Api2Host. */
    static MessageCodec<Object> getCodec() {
      return Api2HostCodec.INSTANCE;
    }

    /** Sets up an instance of `Api2Host` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Api2Host api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api2Host.getResult", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              NetworkResult resultsArg = (NetworkResult)args.get(0);
              if (resultsArg == null) {
                throw new NullPointerException("resultsArg unexpectedly null.");
              }
              Result<NetworkResult> resultCallback = new Result<NetworkResult>() {
                public void success(NetworkResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getResult(resultsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api2Host.getHotspot", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Hotspot resultsArg = (Hotspot)args.get(0);
              if (resultsArg == null) {
                throw new NullPointerException("resultsArg unexpectedly null.");
              }
              Result<Hotspot> resultCallback = new Result<Hotspot>() {
                public void success(Hotspot result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getHotspot(resultsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class PermissionResult2HostCodec extends StandardMessageCodec {
    public static final PermissionResult2HostCodec INSTANCE = new PermissionResult2HostCodec();
    private PermissionResult2HostCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PermissionResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PermissionResult) {
        stream.write(128);
        writeValue(stream, ((PermissionResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PermissionResult2Host {
    void getResult(PermissionResult results, Result<PermissionResult> result);

    /** The codec used by PermissionResult2Host. */
    static MessageCodec<Object> getCodec() {
      return PermissionResult2HostCodec.INSTANCE;
    }

    /** Sets up an instance of `PermissionResult2Host` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PermissionResult2Host api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PermissionResult2Host.getResult", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              PermissionResult resultsArg = (PermissionResult)args.get(0);
              if (resultsArg == null) {
                throw new NullPointerException("resultsArg unexpectedly null.");
              }
              Result<PermissionResult> resultCallback = new Result<PermissionResult>() {
                public void success(PermissionResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getResult(resultsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
